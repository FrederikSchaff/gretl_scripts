/* */

function scalar special_plot_floor2(scalar input)
    return floor(input*100)/100
end function

function scalar special_plot_ceil2(scalar input)
    return ceil(input*100)/100
end function

function scalar special_plot_floor1(scalar input)
    return floor(input*10)/10
end function

function scalar special_plot_ceil1(scalar input)
    return ceil(input*10)/10
end function


function matrix special_plot_stats_MSER5 (series *ts[null], string prefix[null], string x_label[null], bundle *specs)
/* Standard usage is with a list from special_plot bundle. But one can also directly use a series instead */
	scalar use_ser = 1 #use series input as default
	if !exists(ts)
		use_ser = 2 #funcerr 
		if exists(specs)
			if inbundle(specs,input)==5
				if inbundle(specs.input,ts)==7
					if nelem(specs.input.ts)>0
						use_ser = 0
					endif
				endif
			endif
		endif
		if use_ser == 2
			funcerr "** Error: You must supply either a series (&series) or a bundle.bundle.list with one series (&bundle)"
		endif	
	endif
	
    scalar batch=0
    scalar count=0			
    scalar len = $nobs
	scalar n = int((len+4)/5)
    matrix MSER5 = zeros(n,4) #for 5 batches. the first point of the batch refers to the i*5 in the original time series. The x-key is the time, the y-key the mser-5.

	strings names = array(4)
    names[1] = " " #none or obskey important: ADD SPACE
	if exists(x_label)
		names[1]=x_label
	endif		
	if !exists(prefix)
		if use_ser == 1
		string prefix = strsub(argname(ts),"_","\_") ~ ": "
		else
		string prefix = strsub(argname(specs.input.ts[1]),"_","\_") ~ ": "
		endif
	endif
	names[2] = prefix ~ "MSER-5"
    names[3] = prefix ~ "batch-5 mean"
    names[4] = prefix ~ "truncated mean"
    colnames(MSER5, names)

    #Create batch and mser 5 data.
    scalar indx = n
    scalar running_agg = 0
    #	scalar batch_idx = 1 #batch number from back
    loop i=0..len-1	 -q	
		if use_ser == 1	
	        batch += ts[len-i]  #for the current batch, sum up the data
		else
			batch += specs.input.ts[1][len-i]
		endif
        count += 1 #increate the length of the batch
        if count==5 || i==len-1 #at end
            MSER5[indx,1] = len-i + int(count/2) + $t1-1 #index the batch
            MSER5[indx,3] = batch/count          #batch mean.			
            running_agg += MSER5[indx,3]		#running agg
            MSER5[indx,4] = running_agg/(n-indx+1)	#runnning avg	
			#CHECK
# 			if MSER5[indx,2] != 0
# 				funcerr "** Error: Check!
# 			endif
			#CHECK-END	
            loop b=indx..n -q #for each batch in the truncated series, calc (x-x_mean)^2
                MSER5[indx,2] +=( MSER5[b,3]-MSER5[indx,4] )*( MSER5[b,3]-MSER5[indx,4] )
            endloop
            MSER5[indx,2] /= (n-indx+1)*(n-indx+1) #and then normalise the result
            #reset
            batch = 0
            count = 0
			#move backward one batch
            indx -= 1 	
        endif
    endloop
    set warnings off
    MSER5[n,2]=NA #reset last value, which is an artifact "0"
	set warnings on
    return MSER5
end function
