#some plot function, using helpers and colours
#Thanks to artur tarassow for help!
#these are (mainly) ment for cross-sectional data!


include helpers.inp --force
include colours.inp --force
#include helpers_ext.inp --force


/* This is a bundle of functions in three levels, to generate nice plots.
   Level 1 ("the interface")  is the user lvl. This should be called by the user and take as input
   the series, plus some additional options.
   Level 2 ("the functions") is the actual function definition.
   Level 3 ("the methods") are some functions not used by the user, but by the Level 2 functions. 

   The idea is that the functions  are build from a set of 
   (growing) modules, called methods.


   The following level functions are provided (*: planned)

   *jitter(series s) : tester: simple jitter plot from gnuplot. Different data is overlayed, using transparency.

   *violin(series s) : single violin plot with boxplot, if not enough data 
   for a violin exists, a jitter is used instead of the violin. If the 
   series is a constant, a single bar to indicate the value is used instead.
  
   *mult_violin(list l) : multiple violin plots, as before

   *violin_fact(series s, series fact_s) : multiple violin plots, factorized 
   (1 sample).

   *violin_2s(series s1, s2) : two 1/2 violin plots, left for s1, right for s2,
   in addition two 1/2 violin plots with the positive differences (left 
   side: a-b>0?a-b:0, right side: b-a>0?b-a:b).
  
   *violin_2s_sub(series s, string r1, string r2) : as before, but a single 
   series with different sample restrictions given by the strings. 

   *violin_2s_fact(seriesmultiple violin plots, factorized (2 sample) - left 
   side and right side from different samples.

   *for all of these, a histogram option (perhaps automatic choice, depending 
   on granularity?). 

   The following methods are provided (*: planned)

   * labels_from_series

*/

function void jitter (list ls, 
	scalar j_t[1:3:1] "1-swarm, 2-square, 3 side-by-side", 	
	scalar j_s[0::0] "horizontal spread",
	scalar j_o[0::0] "vertical overlap",
	scalar j_w[0::0] "max spread - points get overlaid again. (wrap). Manipulative!",
	scalar ps[0::0] "Pointsize")
    #here: produce a simple jitter plot.
    #http://gnuplot.sourceforge.net/demo/jitter.html
    if exists(obskey)==0
        series obskey = obs
    endif
	matrix ObsK = {obskey}
	colnames(ObsK,varname(obskey))
    matrices M = series_to_matrices(ls) #copy data to matrices
	scalar n_ser = nelem(ls) #number of series
	scalar n_obs = $nobs #number of observations in current sample
	print n_obs
	scalar scale_fact = 10/log(n_obs)
	#if "auto mode", calculate optimal choices
	if j_s==0
		j_s=abs(max(max(ls))-min(min(ls)))/21*scale_fact
	endif
	
	if j_o==0
		j_o=scale_fact*.1
	endif

	if ps==0
		ps=scale_fact*.5
	endif




    string temp_data = data_to_temp(M,ObsK) #create temporary data file
	string jitter_opt = ""	
	if j_t==2
		sprintf jitter_opt "set jitter square" #there is additional vertical wrapping! careful!
	else
		sprintf jitter_opt "set jitter swarm" #standard bee swarm
	endif	
	sprintf jitter_opt "%s overlap first %f spread %f wrap %f",jitter_opt,j_o,j_s,j_w
	#set xtics:  explicit ("<label>" <pos> <level>, ...) form allows arbitrary tic positions or non-numeric tic labels.
	string xtics_ = "("
	loop i=1..n_ser
		if i>1
			sprintf xtics_ "%s,",xtics_
		endif
		sprintf xtics_ "%s'%s' %d",xtics_,colname(M[i],1),i	
	endloop
	sprintf xtics_ "%s)",xtics_	

    #start with plotting
    tmpfile = sprintf("%s/tmp_out.gp", $dotdir)
    outfile @tmpfile --write --quiet #open temp outfile

    printf "set encoding utf8\n" 
    printf "set key autotitle columnheader\n"
	printf "set border 2\n" #only left side box-line
    printf "set xtics @xtics_\n"
	#printf "set xtics nomirror scale 0\n"
	printf "set ytics nomirror rangelimited\n" #tics only left
	printf "set style data point\n"
	printf "set style line 1 pt 6 ps %f\n",ps
	printf "%s\n",jitter_opt
	printf "set title '@jitter_opt'\n"	
    #printf "%s\n",standard_colours_gnuplot() #use my coloursdefault

	printf "set xrange[0.5:%f]\n",n_ser+0.5
    #start plotting block

		#optional: Test
		if j_t == 3
			printf "set multiplot layout 1,2 title 'Jitter style options, overlap first %f spread %f wrap %f; pointsize %.4f'\n",j_o,j_s,j_w,ps 
		endif	

    printf "plot '@temp_data' " 
    loop for s=1..n_ser --quiet
        if s>1
            printf ", \\\n '' "            
        endif        
        printf "index %d using (%d):2 ls 1 lc rgb ",s-1,s #offest -1 for matrices
        printf "%s",colour_5($s)
    endloop
    printf "\n"

		#optional: Test
		if j_t == 3	
	        sprintf jitter_opt "set jitter square overlap first %f spread %f wrap %f",j_o,j_s,j_w
printf "%s\n",jitter_opt
			printf "plot '@temp_data' " 
    		loop for s=1..n_ser --quiet
        if s>1
            printf ", \\\n '' "            
        endif        
        printf "index %d using (%d):2 ls 1 lc rgb ",s-1,s #offest -1 for matrices
        printf "%s",colour_5($s)
    endloop
    printf "\n"
endif
    

	outfile --close 
    gnuplot --input=@tmpfile --output=display
end function  

function void test_plot(list ls "list of series to be plotted", 
	series obskey[null] "Key for observation")
    #test function, simple linesplot, using obs as x
    #note: not nice at all!
    # add obs to dataset, if not other obs key
    if exists(obskey)==0
        series obskey = obs
    endif
	matrix ObsK = {obskey}
	colnames(ObsK,varname(obskey))
    matrices M = series_to_matrices(ls) #copy data to matrices
    string temp_data = data_to_temp(M,ObsK) #create temporary data file


    #start with plotting
    tmpfile = sprintf("%s/tmp_out.gp", $dotdir)
    outfile @tmpfile --write --quiet #open temp outfile
    printf "set encoding utf8\n" 
    printf "set key autotitle columnheader\n"
    #printf "%s\n",standard_colours_gnuplot() #use my coloursdefault

    #start plotting block
    printf "plot '@temp_data' " 
    loop for s=1..nelem(ls) --quiet
        if s>1
            printf ", \\\n '' "            
        endif        
        printf "index %d using 1:2 with lines lc rgb ",s-1
        printf "%s",colour_5($s)
    endloop
    printf "\n"
    outfile --close 
    gnuplot --input=@tmpfile --output=display
end function
